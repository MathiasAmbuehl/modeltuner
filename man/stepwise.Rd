% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stepwise.R
\name{stepwise}
\alias{stepwise}
\alias{step_extend}
\alias{step_extend.model}
\alias{step_extend.default}
\alias{step_forward}
\alias{step_forward.model}
\alias{step_forward.default}
\alias{step_reduce}
\alias{step_reduce.model}
\alias{step_reduce.default}
\alias{step_backward}
\alias{step_backward.model}
\alias{step_backward.default}
\alias{best_subset}
\alias{best_subset.model}
\alias{best_subset.default}
\title{Generate and cross-validate models resulting from adding or removing variables and stepwise procedures}
\usage{
step_extend(x, ...)

\method{step_extend}{model}(
  x,
  formula1 = null_formula(x),
  formula2 = formula(x),
  steps = 1L,
  include_full = FALSE,
  include_base = FALSE,
  cv = TRUE,
  ...
)

\method{step_extend}{default}(x, ...)

step_forward(x, ...)

\method{step_forward}{model}(
  x,
  formula1 = null_formula(x),
  formula2 = formula(x),
  max_step = 10,
  include_base = TRUE,
  include_full = FALSE,
  nfold = getOption("cv_nfold"),
  folds = NULL,
  verbose = getOption("cv_verbose"),
  ...
)

\method{step_forward}{default}(x, ...)

step_reduce(x, ...)

\method{step_reduce}{model}(
  x,
  formula1 = null_formula(x),
  formula2 = formula(x),
  steps = 1L,
  include_full = FALSE,
  include_base = FALSE,
  cv = TRUE,
  ...
)

\method{step_reduce}{default}(x, ...)

step_backward(x, ...)

\method{step_backward}{model}(
  x,
  formula1 = null_formula(x),
  formula2 = formula(x),
  max_step = 10,
  include_full = TRUE,
  include_base = FALSE,
  nfold = getOption("cv_nfold"),
  folds = NULL,
  verbose = getOption("cv_verbose"),
  ...
)

\method{step_backward}{default}(x, ...)

best_subset(x, ...)

\method{best_subset}{model}(
  x,
  formula1 = null_formula(x),
  formula2 = formula(x),
  nvars = 1:5,
  include_base = any(nvars == 0),
  include_full = FALSE,
  cv = TRUE,
  ...
)

\method{best_subset}{default}(x, ...)
}
\arguments{
\item{x}{Object of class \dQuote{model} or a fitted model.}

\item{\dots}{Dots go to \code{cv()} in \code{step_extend()} and \code{step_reduce()} (provided \code{cv=TRUE}),
and to \code{tune()} in \code{step_forward()} and \code{step_backward()}.}

\item{formula1, formula2}{Two \emph{nested} model formulas defining the range of models to be considered.
The larger of the two is taken as the \emph{full model}, the simpler as the \emph{base model}. See the \dQuote{Details} section.}

\item{steps}{(\code{step_extend}, \code{step_reduce}) Integer: Number of variables to add/remove. Default: 1.}

\item{include_full}{Logical: Whether to include the full model in the output.}

\item{include_base}{Logical: Whether to include the base model in the output.}

\item{cv}{(\code{step_extend}, \code{step_reduce}, \code{best_subset}) Logical: Run \code{cv} or just return the multimodel?}

\item{max_step}{(\code{step_forward}, \code{step_backward}) Integer: Maximal number of steps.}

\item{nfold, folds}{Passed to \code{\link{make_folds}}.}

\item{verbose}{Logical: Output information on execution progress in console?}

\item{nvars}{(\code{best_subset}) Integer vector defining the number of variables.}
}
\value{
All of these functions return an object of class \dQuote{\link{cv}}."
}
\description{
\code{step_extend()} combines all models resulting from adding one variable to a \emph{base model} into a multimodel and subjects it to \code{cv()}.
\code{step_forward()} applies \code{step_extend()} repeatedly, selecting the best model with respect to test error at each step,
thus performing a forward selection of variables.

\code{step_reduce()} combines all models resulting from removing one variable from a \emph{full model} into a multimodel and subjects it to \code{cv()}.
\code{step_backward()} applies \code{step_reduce()} repeatedly, selecting the best model w.r.t. test error at each step,
thus performing a backward  elimination of variables.

\code{best_subset()} combines submodels of the \emph{full model} in a multimodel and subjects it to \code{cv()}.
The desired range of the model sizes (number of effects) to include is specified in the parameter \code{nvars}.
}
\details{
\code{formula1} \code{formula2} must be \emph{nested} model formulas, i.e. one of the two formulas must include all terms present in the other.
They define the range of models to be considered: The larger of the two defines the \emph{full model}, the other is taken as the \emph{base model}.

By default, \code{formula1} and \code{formula2} are used to \emph{update} the original model formula.
Enclose a formula in \code{I()} to \emph{replace} the model's formula.
This distinction is relevant whenever you specify a formula including a dot.
See the \dQuote{Details} section and examples in \code{?\link{update.model}}.
}
\examples{
mod <- model(lm(Sepal.Length ~ ., iris), 
             label = "sepLen")
             
# Add variables to base model
oneVarModels <- step_extend(mod)
cv_performance(oneVarModels)

# step_forwamrd
cv_fwd <- step_forward(mod)
cv_performance(cv_fwd)

# Remove variables from full model
mod |> step_reduce() |> cv_performance()
mod |> step_backward() |> cv_performance()

# best subset
mod |> best_subset(nvar = 2:3) |> cv_performance()

}
\seealso{
\code{\link{multimodel}()}, \code{\link{update.model}()}, \code{\link{null_formula}()},
\code{\link{cv}()}, \code{\link{tune}()}
}
