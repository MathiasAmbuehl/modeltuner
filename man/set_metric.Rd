% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/set_metric.R
\name{set_metric}
\alias{set_metric}
\alias{set_metric.cv}
\title{Change the default metric of a \code{cv} object}
\usage{
set_metric(x, ...)

\method{set_metric}{cv}(x, metric = x$metric[1], eval_weights = "default", ...)
}
\arguments{
\item{x}{An object of class \dQuote{cv}.}

\item{\dots}{Passed to metric function.}

\item{metric}{A metric (see \link{metrics}).}

\item{eval_weights}{Evaluation weights; see the \dQuote{Evaluation weights} in the
\dQuote{Details} section of \code{?modeltuner}.
\verb{"eval_weights=default} means \dQuote{use fitting weights} while \verb{"eval_weights=NULL}
means unweighted evaluation.}
}
\value{
A (modified) object of class \code{cv}, with adapted metric.
}
\description{
\code{set_metric} is applied to an object \code{x} of class \dQuote{cv} including one or several
cross-validated models. It changes the default metric of all models in \code{x}.
}
\details{
Changing the metric is most useful when applied to models based on an iteratively fitted model (see \link{ifm}).
In this case, the evaluation log is recalculated for the new metric and
the preference criteria are evaluated based on this updated log.
These computations are only possible when the input \dQuote{cv} object contains the
cross-validation model fits, which requires that it has been generated in a
call \code{\link{cv}(..., keep_fits = TRUE)}.
}
\examples{
m <- model(fm_xgb(Sepal.Length ~., iris), max_depth = 2, 
           label = "xgb_model")
cvm <- cv(m, keep_fits = TRUE)  # keep_fits=TRUE is required here
cv_performance(cvm)
# change the metric
cvm_medae <- set_metric(cvm, "medae")
cv_performance(cvm_medae)

}
