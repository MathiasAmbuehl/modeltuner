% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/c.cv.R
\name{c.cv}
\alias{c.cv}
\title{Add models to a \code{cv} object}
\usage{
\method{c}{cv}(x, ..., param = TRUE)
}
\arguments{
\item{x}{An object of class \dQuote{cv}.}

\item{\dots}{One or several \code{\link{model}}s, \code{\link{multimodel}}s or \code{cv}s.
Any \code{cv} must have the same \code{folds} as \code{x}.}

\item{param}{Logical: Keep the parameter table? See \code{\link{multimodel}}.}
}
\value{
An object of class \dQuote{cv} including all models featured in \code{x} and \dQuote{...}.
}
\description{
Combines the cross-validation results of different models.
The \dQuote{...} arguments can include \code{cv}s, \code{\link{model}}s or \code{\link{multimodel}}s.
\code{cv()} will be applied to the \verb{(multi)model}s in \dQuote{...}, using the \code{folds} from \code{x}.
All \dQuote{cv} objects in \dQuote{...} must have the same \code{folds} as \code{x}.
}
\examples{
mod1 <- model(lm(mpg ~ cyl, mtcars), label = "simpleLinear")
mod2 <- model(lm(mpg ~ ., mtcars), label = "linear")
# Define common folds
mtcars_folds <- make_folds(mtcars, nfold = 5)
# Cross validate both models separately
cv1 <- cv(mod1, folds = mtcars_folds)
cv2 <- cv(mod2, folds = mtcars_folds)
# Combine the two
cv_cars <- c(cv1, cv2)
cv_performance(cv_cars)

# Add a model to a cv object:
c(cv_cars, constant = model(lm(mpg ~ 1, mtcars)))

}
\seealso{
\code{\link{cv}}
}
